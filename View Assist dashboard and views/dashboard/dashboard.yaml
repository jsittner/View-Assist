button_card_templates:
  variable_template:
    variables:
      assist_group: group.viewassist_satellites
      var_weather_entity: weather.home
      use_24_hour_time: false
      default_satellite: |-
        [[[ try {
          return hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.type === "view_audio");
          } catch { return  ""}
        ]]]      
      var_current_time: |
        [[[
          try
          {
            if (variables.use_24_hour_time) {
              var options = { hour: "2-digit", minute: "2-digit", hour12: false };
            } else {
              var options = { hour: "numeric", minute: "2-digit" };      
            }
            
            let time = new Date().toLocaleTimeString([], options).replace("AM","").replace("PM","").replace("am","").replace("pm","");
            
            if(variables.use_24_hour_time) {
              time = time.replace("24:", "00:");
            }
            return time;
          } catch { return  ""}
        ]]]
      var_date_short: |
        [[[    
          const options = { weekday: "short", month: "short", day: "numeric", };
          try {return new Date().toLocaleDateString([], options);} catch { return  ""}  
        ]]]
      var_date_long: |
        [[[
              const options = { weekday: "long", month: "long", day: "numeric", year: 'numeric' };
              try {return new Date().toLocaleDateString([], options)} catch { return  ""}
        ]]]
      var_assistsat_entity: |-
        [[[
          try {
            return hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
            } catch { return  ""}
          
        ]]]
      var_assisting: |-
        [[[
          try 
          {
            var assist_assistbid = hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
            var micdevice = hass.states[assist_assistbid].attributes.mic_device;
            var micstate = hass.states[micdevice].state;
            if (micdevice.includes("_stt")) 
            {
              var assisting = micstate.includes("start");
            }
            else
            {
              var assisting = !micstate.includes("wake_word");
            }
            return `${assisting}`;
          } catch { return  ""}
        ]]] 
      var_mic_device: |-
        [[[
          try
          {
            var micdevice_assistbid = hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
            var micdevice = hass.states[micdevice_assistbid].attributes.mic_device;
            if (micdevice.includes("_stt"))
              {
                var micdevice = micdevice.replace("sensor","switch").replace("stt","mic");      
              }
            return `${micdevice}`;
          } catch { return  ""}
        ]]]
      var_mic_mute: |-
        [[[
          try {
            var micmute_assistbid = hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
            var micdevice = hass.states[micmute_assistbid].attributes.mic_device;
            if (micdevice.includes("_stt"))
              {
                var micdevice = micdevice.replace("sensor","switch").replace("stt","mic");      
              }            
            var micstate = hass.states[micdevice].state;
            return `${micstate}`;
          } catch { return  "";}
        ]]]
      var_mic_switch: |-
        [[[
          try {
            var micswitch_assistbid = hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
            var micdevice = hass.states[micswitch_assistbid].attributes.mic_device;
            if (micdevice.includes("_stt"))
              {
                var micswitch = micdevice.replace("sensor","switch").replace("stt","mic");      
              }
            else
              {
                var micswitch = micdevice.replace("sensor","switch").replace("simple_state","microphone");      
              }
            return `${micswitch}`;
          } catch { return  "";}
        ]]]        
      var_mediaplayer_device: |-
        [[[
          try {
            var mediadevice_assistbid = hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
            var mediadevice = hass.states[mediadevice_assistbid].attributes.mediaplayer_device;
            return `${mediadevice}`;
          } catch { return  "";}
        ]]]        
      var_mediaplayer_mute: |-
        [[[
          try {
            var mediaplayer_assistbid = hass.states[variables.assist_group].attributes.entity_id
             .find((eid) => hass.states[eid].attributes.browser_id === localStorage.getItem("browser_mod-browser-id")) ?? variables.default_satellite;
            var mediadevice = hass.states[mediaplayer_assistbid].attributes.mediaplayer_device;
            var mediaplayerstate = hass.states[mediadevice].attributes.is_volume_muted;
            return `${mediaplayerstate}`;
          } catch { return  "";}
        ]]]
      var_title: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.title;
          } catch { return  ""} 
        ]]]
      var_message: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.message;
          } catch { return  ""} 
        ]]]
      var_image: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.image;
          } catch { return  ""} 
        ]]]
      var_font_size: |-
        [[[ 
          try 
          {
            return states[variables.var_assistsat_entity].attributes.message_font_size;
          }
          catch { return  ""} 
        ]]]
      var_weather_temperature: |-
        [[[ 
          try 
          {
            return (states[variables.var_weather_entity].attributes.temperature  + 'Â°');
          }
          catch { return  ""}
        ]]]      
      var_weather_icon: |-
        [[[
          const weatherIconsDay  = {
            "clear-night": "mdi:weather-night", 
            "cloudy": "mdi:weather-cloudy",
            "dust":"mdi:weather-dust",
            "fog": "mdi:weather-fog",
            "hail": "mdi:weather-hail",
            "hazy": "mdi:weather-hazy", 
            "hurricane": "mdi:weather-hurricane",
            "lightning": "mdi:weather-lightning",
            "lightning-rainy": "mdi:weather-lightning-rainy",
            "partlycloudy": "mdi:weather-partly-cloudy",
            "partly-lightning": "mdi:weather-partly-lightning", 
            "partly-rainy": "mdi:weather-partly-rainy",
            "partly-snowy": "mdi:weather-partly-snowy", 
            "partly-snowy-rainy": "mdi:weather-partly-snowy-rainy", 
            "pouring": "mdi:weather-pouring",
            "rainy": "mdi:weather-rainy",
            "snowy": "mdi:weather-snowy",
            "snowy-heavy": "mdi:weather-snowy-heavy",
            "snowy-rainy": "mdi:weather-snowy-rainy",
            "sunny": "mdi:weather-sunny",
            "tornado":"mdi:weather-tornado",
            "windy":  "mdi:weather-windy",
            "windy-variant": "mdi:weather-windy-variant",
          };
          const weatherIconsNight = {
            ...weatherIconsDay,
            clear: "mdi:weather-night",
            sunny: "mdi:weather-night",
            partlycloudy: "mdi:weather-night-partly-cloudy",
          };
          try
          {
            var condition = states[variables.var_weather_entity].state;
            if (states['sun.sun'] === 'above_horizon') {
              var weather_icon = weatherIconsDay[condition]; 
            } else {
              var weather_icon = weatherIconsDay[condition]; 
            }
            
            if (typeof(weather_icon) === 'undefined') { 
              var weather_icon = "mdi:help" 
            }   
            return `${weather_icon}`;
          } catch { return  ""} 
        ]]]
  body_template:
    show_state: false
    show_icon: false
    show_name: false
    triggers_update: all
    tap_action:
      action: call-service
      service: python_script.set_state
      service_data:
        entity_id: '[[[ try { return variables.var_assistsat_entity } catch { return  "" }]]]'
        mode: hold
    double_tap_action:
      action: call-service
      service: python_script.set_state
      service_data:
        entity_id: '[[[ try { return variables.var_assistsat_entity } catch { return  "" } ]]]'
        mode: normal
    hold_action:
      action: call-service
      service: switch.toggle
      service_data:
        entity_id: '[[[ try { return variables.var_mic_switch } catch { return  "" } ]]]'
    aspect_ratio: 2/1
    styles:
      grid:
        - grid-template-areas: |
            "title status"  
            "message message"
            "assist assist"        
        - grid-template-rows: min-content 4fr min-content
        - grid-template-columns: 1fr 1fr
        - row-gap: .5rem
      card:
        - min-height: 100vh
        - background-color: '#059bf1'
        - background-size: cover
        - border-radius: 0px
        - overflow: hidden
        - color: white
        - font-family: '"Roboto", sans-serif'
        - font-weight: 300
      custom_fields:
        title:
          - justify-self: start
          - align-self: start
          - z-index: 2
          - font-size: 200%
          - font-weight: 400
          - width: max-content
          - margin-left: 2%
          - margin-top: '-5%'
        status:
          - justify-self: end
          - align-self: start
          - z-index: 2
          - font-size: 200%
          - font-weight: 400
          - width: max-content
          - margin-top: '-10%'
        assist:
          - justify-self: end
          - height: 10px
          - position: absolute
          - width: 100%
          - z-index: 2
          - top: 95%
          - animation: >-
              [[[ if (variables.var_assisting == "true") return "pulse 2s
              infinite"; else return "" ]]]
          - height: 10px
    extra_styles: |
      @keyframes pulse {
        0%, 100% {
          background-color: #f56a3f;
        }
        50% {
          background-color: #9e42b0;
        }
      }      
    custom_fields:
      assist: ''
      title: '[[[ return variables.var_title ]]]'
      status:
        card:
          type: custom:button-card
          styles:
            grid:
              - grid-template-areas: |
                  "mediaplayer mic hold dnd"
              - grid-template-rows: min-content
              - grid-template-columns: 1fr 1fr 1fr 1fr
            card:
              - background-color: transparent
              - border-width: 0px
            custom_fields:
              mediaplayer:
                - position: relative
                - display: >-
                    [[[ if (variables.var_mediaplayer_mute === "true") return
                    "block"; else return "none"; ]]]
              mic:
                - position: relative
                - display: >-
                    [[[ if (variables.var_mic_mute === "off") return "block";
                    else return "none"; ]]]
              hold:
                - position: relative
                - display: >-
                    [[[ 
                      try 
                      { 
                        if (hass.states[variables.var_assistsat_entity].attributes.mode === "hold") return "block"; else return "none";
                      } catch { return "none"}
                    ]]]                
              dnd:
                - position: relative
                - display: >-
                    [[[ 
                      try
                      {
                        if (hass.states[variables.var_assistsat_entity].attributes.do_not_disturb === true) return "block"; else return "none";
                      } catch { return "none"}                        
                    ]]]                                
          custom_fields:
            mediaplayer:
              card:
                type: custom:button-card
                icon: mdi:volume-off
                show_name: false
                color_type: card
                styles:
                  card:
                    - background-color: transparent
                    - border-width: 0px
                  icon:
                    - color: white
                    - height: 90%
                tap_action:
                  action: call-service
                  service: media_player.volume_mute
                  service_data:
                    entity_id: '[[[ return variables.var_mediaplayer_device ]]]'
                    is_volume_muted: false
            mic:
              card:
                type: custom:button-card
                icon: mdi:microphone-off
                show_name: false
                color_type: card
                styles:
                  card:
                    - background-color: transparent
                    - border-width: 0px
                  icon:
                    - color: white
                    - height: 90%
                tap_action:
                  action: call-service
                  service: homeassistant.turn_on
                  service_data:
                    entity_id: '[[[ return variables.var_mic_device ]]]'
            hold:
              card:
                type: custom:button-card
                icon: mdi:hand-back-left
                show_name: false
                color_type: card
                styles:
                  card:
                    - background-color: transparent
                    - border-width: 0px
                  icon:
                    - color: white
                    - height: 90%
                tap_action:
                  action: call-service
                  service: python_script.set_state
                  service_data:
                    mode: normal
                    entity_id: '[[[ return variables.var_assistsat_entity ]]]'
            dnd:
              card:
                type: custom:button-card
                icon: mdi:minus-circle
                show_name: false
                color_type: card
                styles:
                  card:
                    - background-color: transparent
                    - border-width: 0px
                  icon:
                    - color: white
                    - height: 90%
                tap_action:
                  action: call-service
                  service: python_script.set_state
                  service_data:
                    do_not_disturb: false
                    entity_id: '[[[ return variables.var_assistsat_entity ]]]'
